//=============================================================================
// File:		Main.cpp
// Created:		2015/01/28
// Last Edited:	2015/01/29
// Copyright:	Daniel Schenker
// Description:	Main.cpp
//=============================================================================

//=============================================================================
//Includes
//=============================================================================

// Standard Headers
#include <stdio.h>

// GLEW
#define GLEW_STATIC
#include <GL/glew.h>

// GLFW
#include <GLFW/glfw3.h>

// GLM


//=============================================================================
//Main
//=============================================================================
int main()
{
	//Initialization
	// GLFW
	glfwInit();

	//  Configuration

	//minimum Version 3.2
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 2);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
	glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);

	//is the window resizeable? No
	glfwWindowHint(GLFW_RESIZABLE, GL_FALSE);

	//create the actual window
	GLFWwindow* pWindow = glfwCreateWindow(800, 600, "Window Title", nullptr, nullptr);//Windowed
	//GLFWwindow* pWindow = glfwCreateWindow(800, 600, "Window Title", glfwGetPrimaryMonitor(), nullptr);

	//OpenGL context - set pWindow to active
	glfwMakeContextCurrent(pWindow);

	// GLEW
	glewExperimental = GL_TRUE;
	glewInit();

	GLuint vertexBuffer;
	glGenBuffers(1, &vertexBuffer);

	printf("%u\n", vertexBuffer);

	// [Closed] Event Loop
	while(glfwWindowShouldClose(pWindow) == false)
	{
		//If key pressed: escape
		if(glfwGetKey(pWindow, GLFW_KEY_ESCAPE) == GLFW_PRESS)
		{
			//Close the window
			glfwSetWindowShouldClose(pWindow, GL_TRUE);
		}

		//Swap the back buffer and the front buffer
		glfwSwapBuffers(pWindow);
		//Retrieve window events
		glfwPollEvents();
	}

	//Termination
	// GLFW
	glfwTerminate();
}